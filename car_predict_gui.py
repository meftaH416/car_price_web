# -*- coding: utf-8 -*-
"""car_predict_GUI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12xz_FKC5qqKSaAUXtpCEFcaXt6WXiCvw
"""


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""**1. Data importing and descriptions**"""

df = pd.read_csv("/Users/meftahuddin/Library/CloudStorage/OneDrive-UniversityofMissouri/Desktop/Data analysis/Data Thinker/car_price.csv")

df.head()

df.info()

df.shape

df.isnull().sum()

df.head()

"""**2. Converting the unique string to numbers and data processing**"""

df['Fuel_Type'].unique()
df['Fuel_Type'] = df['Fuel_Type'].map({'Petrol':0, 'Diesel':1, 'CNG':2})

df['Seller_Type'].unique()
df['Seller_Type'] = df['Seller_Type'].map({'Dealer':0, 'Individual':1})

df['Transmission'].unique()
df['Transmission'] = df['Transmission'].map({'Manual':0, 'Automatic':1})

df.head()

import datetime

date_time = datetime.datetime.now()
date_time.year

df['Age'] = date_time.year - df['Year']

df.head()

df.drop(['Car_Name','Year'],axis=1,inplace=True)

"""**3. Outlier removal**"""

sns.boxplot(df['Selling_Price'])

df = df[~(df['Selling_Price']>=33.0) & (df['Selling_Price']<=35.0)]

df.head()

X = df.drop('Selling_Price', axis=1)
y = df['Selling_Price']

"""**4. Train Test Split**"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**5. Model creation**"""

from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from xgboost import XGBRegressor
from sklearn.tree import DecisionTreeRegressor

lr = LinearRegression()
lr.fit(X_train,y_train)

rf = RandomForestRegressor()
rf.fit(X_train,y_train)

xgb = GradientBoostingRegressor()
xgb.fit(X_train,y_train)

xg = XGBRegressor()
xg.fit(X_train,y_train)

dct = DecisionTreeRegressor()
dct.fit(X_train,y_train)

"""**6. Prediction**"""

y_pred1 = lr.predict(X_test)
y_pred2 = rf.predict(X_test)
y_pred3 = xgb.predict(X_test)
y_pred4 = xg.predict(X_test)
y_pred5 = dct.predict(X_test)

"""**7. Evaluation of the model**"""

from sklearn.metrics import r2_score

score1 = r2_score(y_test,y_pred1)
score2 = r2_score(y_test,y_pred2)
score3 = r2_score(y_test,y_pred3)
score4 = r2_score(y_test,y_pred4)
score5 = r2_score(y_test,y_pred5)

print(score1,score2,score3,score4,score5)

ml_models = pd.DataFrame({'Models':['LinearRegression','Randomforest','GradientBoost','XG','DecisionTree'], 'Scores':[0.6790884983129405, 0.719709133023081, 0.8835838008561065, 0.8864839405756888, 0.862138671158528]})

ml_models

sns.barplot(x='Models', y='Scores', data=ml_models)
plt.xlabel('Models')
plt.ylabel('Scores')
plt.title('Scores of ML Models')
plt.show()

"""**8. Final model and saving the model**"""

xg = XGBRegressor()
xg_final = xg.fit(X,y)

import joblib
'''joblib.dump(xg_final,'/Users/meftahuddin/Library/CloudStorage/OneDrive-UniversityofMissouri/Desktop/Data analysis/Data Thinker/car_price_predictor.pkl')

model = joblib.load('Users/meftahuddin/Library/CloudStorage/OneDrive-UniversityofMissouri/Desktop/Data analysis/Data Thinker/car_price_predictor.pkl')'''

xg_final.save_model('xgb_model.json')

"""**9. Predicting new data**"""

import pandas as pd
data_new = pd.DataFrame({
    'Present_Price':5.59,
    'Kms_Driven':27000,
    'Fuel_Type':0,
    'Seller_Type':0,
    'Transmission':0,
    'Owner':0,
    'Age':8
},index=[0])

model = xg_final
model.predict(data_new)



"""**GUI**"""

#Colab do not support GUI

from tkinter import *
import joblib

def show_entry_fields():
    p1=float(e1.get())
    p2=float(e2.get())
    p3=float(e3.get())
    p4=float(e4.get())
    p5=float(e5.get())
    p6=float(e6.get())
    p7=float(e7.get())
    
    #model = joblib.load('car_price_predictor')
    data_new = pd.DataFrame({
    'Present_Price':p1,
    'Kms_Driven':p2,
    'Fuel_Type':p3,
    'Seller_Type':p4,
    'Transmission':p5,
    'Owner':p6,
    'Age':p7
},index=[0])
    result=model.predict(data_new)
    Label(master, text="Car Purchase amount").grid(row=8)
    Label(master, text=result).grid(row=10)
    print("Car Purchase amount", result[0])
    
master = Tk()
master.title("Car Price Prediction Using Machine Learning")
label = Label(master, text = "Car Price Prediction Using Machine Learning"
                          , bg = "black", fg = "white"). \
                               grid(row=0,columnspan=2)


Label(master, text="Present_Price").grid(row=1)
Label(master, text="Kms_Driven").grid(row=2)
Label(master, text="Fuel_Type").grid(row=3)
Label(master, text="Seller_Type").grid(row=4)
Label(master, text="Transmission").grid(row=5)
Label(master, text="Owner").grid(row=6)
Label(master, text="Age").grid(row=7)


e1 = Entry(master)
e2 = Entry(master)
e3 = Entry(master)
e4 = Entry(master)
e5 = Entry(master)
e6 = Entry(master)
e7 = Entry(master)


e1.grid(row=1, column=1)
e2.grid(row=2, column=1)
e3.grid(row=3, column=1)
e4.grid(row=4, column=1)
e5.grid(row=5, column=1)
e6.grid(row=6, column=1)
e7.grid(row=7, column=1)


Button(master, text='Predict', command=show_entry_fields).grid()

mainloop()

